// Code generated by MockGen. DO NOT EDIT.
// Source: tags.go
//
// Generated by this command:
//
//	mockgen -source=tags.go -destination=../mocks/mock_monitor/tags.go -package=mock_monitor
//
// Package mock_monitor is a generated GoMock package.
package mock_monitor

import (
	context "context"
	reflect "reflect"

	monitor "github.com/vd09/trading-algorithm-backtesting-system/monitor"
	gomock "go.uber.org/mock/gomock"
)

// MockTags is a mock of Tags interface.
type MockTags struct {
	ctrl     *gomock.Controller
	recorder *MockTagsMockRecorder
}

// MockTagsMockRecorder is the mock recorder for MockTags.
type MockTagsMockRecorder struct {
	mock *MockTags
}

// NewMockTags creates a new mock instance.
func NewMockTags(ctrl *gomock.Controller) *MockTags {
	mock := &MockTags{ctrl: ctrl}
	mock.recorder = &MockTagsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTags) EXPECT() *MockTagsMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockTags) Add(key string, value any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Add", key, value)
}

// Add indicates an expected call of Add.
func (mr *MockTagsMockRecorder) Add(key, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockTags)(nil).Add), key, value)
}

// AddTagsFromCtx mocks base method.
func (m *MockTags) AddTagsFromCtx(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddTagsFromCtx", ctx)
}

// AddTagsFromCtx indicates an expected call of AddTagsFromCtx.
func (mr *MockTagsMockRecorder) AddTagsFromCtx(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTagsFromCtx", reflect.TypeOf((*MockTags)(nil).AddTagsFromCtx), ctx)
}

// Delete mocks base method.
func (m *MockTags) Delete(key string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Delete", key)
}

// Delete indicates an expected call of Delete.
func (mr *MockTagsMockRecorder) Delete(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTags)(nil).Delete), key)
}

// Get mocks base method.
func (m *MockTags) Get() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockTagsMockRecorder) Get() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockTags)(nil).Get))
}

// With mocks base method.
func (m *MockTags) With(key string, value any) monitor.Tags {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "With", key, value)
	ret0, _ := ret[0].(monitor.Tags)
	return ret0
}

// With indicates an expected call of With.
func (mr *MockTagsMockRecorder) With(key, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "With", reflect.TypeOf((*MockTags)(nil).With), key, value)
}
