// Code generated by MockGen. DO NOT EDIT.
// Source: monitoring.go
//
// Generated by this command:
//
//	mockgen -source=monitoring.go -destination=../mocks/mock_monitor/monitoring.go -package=mock_monitor
//
// Package mock_monitor is a generated GoMock package.
package mock_monitor

import (
	context "context"
	reflect "reflect"

	monitor "github.com/vd09/trading-algorithm-backtesting-system/monitor"
	gomock "go.uber.org/mock/gomock"
)

// MockGaugeMetric is a mock of GaugeMetric interface.
type MockGaugeMetric struct {
	ctrl     *gomock.Controller
	recorder *MockGaugeMetricMockRecorder
}

// MockGaugeMetricMockRecorder is the mock recorder for MockGaugeMetric.
type MockGaugeMetricMockRecorder struct {
	mock *MockGaugeMetric
}

// NewMockGaugeMetric creates a new mock instance.
func NewMockGaugeMetric(ctrl *gomock.Controller) *MockGaugeMetric {
	mock := &MockGaugeMetric{ctrl: ctrl}
	mock.recorder = &MockGaugeMetricMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGaugeMetric) EXPECT() *MockGaugeMetricMockRecorder {
	return m.recorder
}

// SetGauge mocks base method.
func (m *MockGaugeMetric) SetGauge(ctx context.Context, value float64, tags monitor.Tags) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetGauge", ctx, value, tags)
}

// SetGauge indicates an expected call of SetGauge.
func (mr *MockGaugeMetricMockRecorder) SetGauge(ctx, value, tags any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetGauge", reflect.TypeOf((*MockGaugeMetric)(nil).SetGauge), ctx, value, tags)
}

// MockHistogramMetrics is a mock of HistogramMetrics interface.
type MockHistogramMetrics struct {
	ctrl     *gomock.Controller
	recorder *MockHistogramMetricsMockRecorder
}

// MockHistogramMetricsMockRecorder is the mock recorder for MockHistogramMetrics.
type MockHistogramMetricsMockRecorder struct {
	mock *MockHistogramMetrics
}

// NewMockHistogramMetrics creates a new mock instance.
func NewMockHistogramMetrics(ctrl *gomock.Controller) *MockHistogramMetrics {
	mock := &MockHistogramMetrics{ctrl: ctrl}
	mock.recorder = &MockHistogramMetricsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHistogramMetrics) EXPECT() *MockHistogramMetricsMockRecorder {
	return m.recorder
}

// ObserveHistogram mocks base method.
func (m *MockHistogramMetrics) ObserveHistogram(ctx context.Context, value float64, tags monitor.Tags) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ObserveHistogram", ctx, value, tags)
}

// ObserveHistogram indicates an expected call of ObserveHistogram.
func (mr *MockHistogramMetricsMockRecorder) ObserveHistogram(ctx, value, tags any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObserveHistogram", reflect.TypeOf((*MockHistogramMetrics)(nil).ObserveHistogram), ctx, value, tags)
}

// MockCounterMetric is a mock of CounterMetric interface.
type MockCounterMetric struct {
	ctrl     *gomock.Controller
	recorder *MockCounterMetricMockRecorder
}

// MockCounterMetricMockRecorder is the mock recorder for MockCounterMetric.
type MockCounterMetricMockRecorder struct {
	mock *MockCounterMetric
}

// NewMockCounterMetric creates a new mock instance.
func NewMockCounterMetric(ctrl *gomock.Controller) *MockCounterMetric {
	mock := &MockCounterMetric{ctrl: ctrl}
	mock.recorder = &MockCounterMetricMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCounterMetric) EXPECT() *MockCounterMetricMockRecorder {
	return m.recorder
}

// IncrementCounter mocks base method.
func (m *MockCounterMetric) IncrementCounter(ctx context.Context, tags monitor.Tags) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IncrementCounter", ctx, tags)
}

// IncrementCounter indicates an expected call of IncrementCounter.
func (mr *MockCounterMetricMockRecorder) IncrementCounter(ctx, tags any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrementCounter", reflect.TypeOf((*MockCounterMetric)(nil).IncrementCounter), ctx, tags)
}

// SetCounter mocks base method.
func (m *MockCounterMetric) SetValue(ctx context.Context, value float64, tags monitor.Tags) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetValue", ctx, value, tags)
}

// SetCounter indicates an expected call of SetCounter.
func (mr *MockCounterMetricMockRecorder) SetCounter(ctx, value, tags any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetValue", reflect.TypeOf((*MockCounterMetric)(nil).SetValue), ctx, value, tags)
}

// MockMonitoring is a mock of Monitoring interface.
type MockMonitoring struct {
	ctrl     *gomock.Controller
	recorder *MockMonitoringMockRecorder
}

// MockMonitoringMockRecorder is the mock recorder for MockMonitoring.
type MockMonitoringMockRecorder struct {
	mock *MockMonitoring
}

// NewMockMonitoring creates a new mock instance.
func NewMockMonitoring(ctrl *gomock.Controller) *MockMonitoring {
	mock := &MockMonitoring{ctrl: ctrl}
	mock.recorder = &MockMonitoringMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMonitoring) EXPECT() *MockMonitoringMockRecorder {
	return m.recorder
}

// ExposeMetrics mocks base method.
func (m *MockMonitoring) ExposeMetrics(addr string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ExposeMetrics", addr)
}

// ExposeMetrics indicates an expected call of ExposeMetrics.
func (mr *MockMonitoringMockRecorder) ExposeMetrics(addr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExposeMetrics", reflect.TypeOf((*MockMonitoring)(nil).ExposeMetrics), addr)
}

// RegisterCounter mocks base method.
func (m *MockMonitoring) RegisterCounter(ctx context.Context, name, help string, labels monitor.Labels) monitor.CounterMetric {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterCounter", ctx, name, help, labels)
	ret0, _ := ret[0].(monitor.CounterMetric)
	return ret0
}

// RegisterCounter indicates an expected call of RegisterCounter.
func (mr *MockMonitoringMockRecorder) RegisterCounter(ctx, name, help, labels any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterCounter", reflect.TypeOf((*MockMonitoring)(nil).RegisterCounter), ctx, name, help, labels)
}

// RegisterGauge mocks base method.
func (m *MockMonitoring) RegisterGauge(ctx context.Context, name, help string, labels monitor.Labels) monitor.GaugeMetric {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterGauge", ctx, name, help, labels)
	ret0, _ := ret[0].(monitor.GaugeMetric)
	return ret0
}

// RegisterGauge indicates an expected call of RegisterGauge.
func (mr *MockMonitoringMockRecorder) RegisterGauge(ctx, name, help, labels any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterGauge", reflect.TypeOf((*MockMonitoring)(nil).RegisterGauge), ctx, name, help, labels)
}

// RegisterHistogram mocks base method.
func (m *MockMonitoring) RegisterHistogram(ctx context.Context, name, help string, buckets []float64, labels monitor.Labels) monitor.HistogramMetrics {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterHistogram", ctx, name, help, buckets, labels)
	ret0, _ := ret[0].(monitor.HistogramMetrics)
	return ret0
}

// RegisterHistogram indicates an expected call of RegisterHistogram.
func (mr *MockMonitoringMockRecorder) RegisterHistogram(ctx, name, help, buckets, labels any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterHistogram", reflect.TypeOf((*MockMonitoring)(nil).RegisterHistogram), ctx, name, help, buckets, labels)
}
